
;************************************************
; 8039 Quarz = 3,6864 Mhz                       *
; f = 3,6864 Mhz / 3 = 1,2288 Mhz               *
; ALE = CLK / 5 = 245,76 kHz = 4,069 us         *
; TCLK int = ALE / 32 = 7,68 kHz = 130,2083 us  *
; 1 cyc = 4,069 us                              *
; 1 timer tick = 130 us                         *
; Syntax: Telemark TASM Version 3.2             *
;************************************************

#include "mc1000.inc";
#include "i2c.inc";


.org 0000h

_RESET		jmp INIT	; reset sprungadresse
		nop
_INT		jmp INTERRUPT	; interrupt sprungadresse
		nop
		nop
_TINT		jmp TIMERINT	; timer interrupt sprungadresse
		nop

.org 0010h
	; Platz fuer 16 Byte EPROM ID
	.byte	"0123456789abcdef"
	
	; ---------------- init --------------------
INIT	dis i		; (1 cyc) interrupt verhindern
	dis tcnti	; (1 cyc) timer interrupt verhindern
	ent0 clk	; (1 cyc) T0 prozessortakt ausgeben
	
	call I2CINIT	; init i2c - SDA and SCL high
	
LOOP	call rdSW12	; read SW1 & SW2
	
	call I2CSTART	; start of I2C sequence
	
	; i2c address byte
	mov r0,#$ZP_SW1	; SW1 i2c address
	mov a,@r0	; i2c 7-bit address
	rl a		; adapt SW1 to address, b0= 0 (write)
	call I2COUT	; write pattern of SW1 as address
	
	; i2c data byte
	mov r0,#$ZP_SW2	; SW2 i2c data
	mov a,@r0	; i2c 8-bit data
	;mov a,#$(%01010101)
	call I2COUT	; write pattern of SW2 as data
	
	call I2CSTOP	; STOP of I2C sequence
	
	call WATCHDOG	; trigger watchdog
	jmp LOOP	; loop again


;*****************************************
; I2C write out address/date
; SDA & SCL should be low before
; data must be stable before and after clock
; A= address/data -> R3
; r0= temp bitcounter
; r3= temp address/data
;*****************************************
I2COUT	; SDA & SCL should here be low
	mov r0,#$08	; set bitcounter to 8-bit
	
	; loop over 8-bit adress+RW/data
I2CB01	mov r3,a	; set A to temp adress/data
	clr c		; prerpare carry
	mov a,r3	; load temp adress/data
	rlc a		; shift bit out into carry
	jc I2CB1	; bit set
	jmp I2CB2	; bit clear
I2CB1	orl p1,#$(1 << SDA) ; SDA high, bit rising
I2CB2	orl p1,#$(1 << SCL) ; SCL high, clock rising
	anl p1,#~(1 << SCL) ; SCL low, clock falling
	anl p1,#~(1 << SDA) ; SDA low, bit falling
	djnz r0,I2CB01	; decrement bitcounter,next loop r0>0
	
	; check bit-9 AKN/NAKN
	orl p1,#$(1 << SCL) ; SCL high, clock rising
	in a,p1		; read P1x
	nop		; result of AKN/NAKN TBD
	anl p1,#~(1 << SCL) ; SCL low, clock falling
	
	ret		; Bye


;*****************************************
; I2C init sequence
;*****************************************
I2CINIT	
	orl p1,#$((1 << SDA)|(1 << SCL)) ; SDA & SCL high
	ret


;*****************************************
; I2C start sequence
; SDA & SCL should be low before
;*****************************************
I2CSTART
	orl p1,#$((1 << SDA)|(1 << SCL)) ; SDA & SCL high
	anl p1,#~(1 << SDA)		; SDA low, SCL high
	anl p1,#~((1 << SDA)|(1 << SCL)) ; SDA & SCL low
	ret				;


;*****************************************
; I2C start sequence
; SDA & SCL should be low before
;*****************************************
I2CSTOP
	orl p1,#$(1 << SCL)		; SCL high
	orl p1,#$((1 << SDA)|(1 << SCL)) ; SDA & SCL high
	ret				;


;************************************************
; Load SW1/SW2
; R3/R4= temporary result of SW1/SW2
; P10-13= used for address counting
; $20= result of SW1
; $21= result of SW2
;************************************************
rdSW12:
	mov	a,#$10		; init value-corunter
	mov	r2,a		; with %00010000
L0332:
	mov	a,r3		; move SW counter from r3
	mov	r4,a		; to SW counter r4
L0334:
	dec	r2		; value-counter r2--
	in	a,p1		; load current value of port1
	anl	a,#$F0		; cut low nibble
	orl	a,r2		; "add" value-counter r2 into
	outl	p1,a		; write back to port1
	mov	a,r3		; load A with r3
	clr	c		; clear carry
	jt1	L033F		; SW is "On"?
	cpl	c		; set carry (inverted val)
L033F:
	rlc	a		; fill value with carry from right
	mov	r3,a		; store result to counter r3
	mov	a,r2		; load counter r2
	jb3	L0332		; bit 3 set (SW2 active)?
	anl	a,#$0F		; cut high nibble
	jz	L034A		; value-counter clear
	jmp	L0334		; next loop, SW counter -> r4
L034A:
	mov	r0,#ZP_SW1	; set index ZP $20
	mov	a,r3		; store result from r3
	mov	@r0,a		; to RAM $20
	mov	r0,#ZP_SW2	; set index ZP $21
	mov	a,r4		; store result from r4
	mov	@r0,a		; to RAM $21
	ret			; bye


;************************************************
; Load SW1/SW2
; R3/R4= temporary result of SW1/SW2
; $20= result of SW1
; $21= result of SW2
;************************************************
;rdSW12:
;	mov	a,#$10		; init value-corunter
;	mov	r2,a		; with %00010000
;	;mov	r3,#$00
;L0332:
;	mov	a,r3		; move SW1 counter from r3
;	mov	r4,a		; to SW2 counter r4
;L0334:
;	dec	r2		; value-counter r2--
;	in	a,p1		; load current value of port1
;	anl	a,#$F0		; cut low nibble
;	orl	a,r2		; "add" value-counter r2 into
;	
;	orl	a,#$(1<<SCL)|(1 << SDA)
;	
;	outl	p1,a		; write back to port1
;	mov	a,r3		; load A with r3
;	clr	c		; clear carry
;	jt1	L033F		; SW is "On"?
;	cpl	c		; set carry (inverted val)
;L033F:
;	rlc	a		; fill value with carry from right
;	mov	r3,a		; store result to counter r3
;	mov	a,r2		; load counter r2
;	jb3	L0332		; bit 3 set (SW2 active)?
;	anl	a,#$0F		; cut high nibble
;	jz	L034A		; value-counter clear
;	jmp	L0334		; next loop, SW counter -> r4
;L034A:
;	mov	r0,#ZP_SW1	; set index ZP $20
;	mov	a,r3		; store result from r3
;	mov	@r0,a		; to RAM $20
;	mov	r0,#ZP_SW2	; set index ZP $21
;	mov	a,r4		; store result from r4
;	mov	@r0,a		; to RAM $21
;	ret			; bye


;*****************************************
; watchdog impuls |_|- high->low -> high *
; must be execute at least each ~630ms   *
;*****************************************
WATCHDOG:
	anl p2,#$(~b_WD)	; (2 cyc) P27 Watchdog low
	orl p2,#b_WD		; (2 cyc) P27 Watchdog high
	ret			; (2 cyc)


;***********************************************
; Timer interrupt routine                      *
;***********************************************
TIMERINT:
	retr


;***********************************************
; interrupt routine                            *
;***********************************************
INTERRUPT:
	retr			;



.end

